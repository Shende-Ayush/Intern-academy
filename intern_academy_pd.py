# -*- coding: utf-8 -*-
"""intern academy PD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zYlKCDg-lSQkTYwFh2rN02ak0DfimUUm

# **Task 1) Parkinsion Diseases Detection - :**

---
# **Author : Ayush Shende**

> *intern Academy*

# **Classification using SVC method**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import seaborn as sns
# %matplotlib inline

"""# **Getting Data Set**

"""

df = pd.read_csv('/content/drive/MyDrive/data sets/parkinsons.csv')

print(df)

"""# checking data"""

print(df.info())

print(df.describe())

"""# **Checking For null values **"""

print(df.isnull().sum())

"""# **Visualization of data using graphs**"""

df['status'].value_counts().plot(kind='bar',color=['green','red'])
plt.xlabel('Counts')
plt.ylabel("Status")
plt.show()

"""# **Defineing the data and the lables**"""

X = df.drop(columns = ['name','status'],axis=1)
Y = df['status']

"""# **Spliting data in to train and test **

> split data in o train and train data set where train data set is 20% of that on the actual data set 


"""

x_train,x_test,y_train,y_test = train_test_split(X,Y, random_state = 2021 , test_size =0.2)
print(x_train.shape,x_test.shape )

"""# **standardize the data**"""

from sklearn.preprocessing import StandardScaler
sc= StandardScaler()
sc.fit_transform(x_train)
x_train = sc.transform(x_train)
x_test = sc.transform(x_test)

print(x_test[1:2])

"""# **Fiting Data for SVM (SVC) Algo**

> Creating te model

"""

from sklearn.svm import SVC

svm=SVC(kernel="linear",random_state=0)

svm.fit(x_train,y_train)

"""# **predcting the and testing using test data set**"""

y_pred=svm.predict(x_test)
print(y_pred)

"""# Calculating the **accuracy**"""

from sklearn.metrics import confusion_matrix , accuracy_score
print ('Accuracy of model with test data  == {:.2f}'.format(svm.score( x_train, y_train )))
print('Accuracy Of the modle = {:.2f}'.format(accuracy_score(y_pred,y_test)))

"""# **Getting Confusion matrix and its heatmap**"""

print("Comfusion mtrix = \n",confusion_matrix(y_test,y_pred),"\n\n")
sns.heatmap(confusion_matrix(y_test,y_pred))
plt.show()

